# -*- coding: utf-8 -*-
"""
Created on Thu Jul  9 10:23:38 2020

@author: oduma

"""

from bs4 import BeautifulSoup
import requests
from fuzzywuzzy import fuzz
import pandas as pd

# Get my resume in text
with open('CV.txt', 'r') as file:
    CV_text = file.read().replace('\n', '')

# Get job URLs on LinkedIn (Search words: 'Data Analyst', 'Seattle') and search through page 1-10
job_link = []
link_ratio = []
for i in range(10):
    search_URL = 'https://www.linkedin.com/jobs/search/?geoId=104116203&keywords=data%20analyst&location=Seattle%2C%20Washington%2C%20United%20States' + 'start=' + str(25*i)
    search_page = requests.get(search_URL)
    #print(search_page.content)
    soup = BeautifulSoup(search_page.content, 'html.parser')
    for link in soup.find_all('a'):
        if 'https://www.linkedin.com/jobs/view/' in link.get('href'):
            job_link.append(link.get('href'))
    
# Get job descriptions in each job link & filter to jobs from the last 2 weeks
for i in range(len(job_link)):
    job_URL = job_link[i]
    job_page = requests.get(job_URL)
    html = str(job_page.content)
    sub = 'datePosted'
    index = html.find(sub)
    post_date_str = html[index+13:index+23]
    post_date = datetime.strptime(post_date_str, '%Y-%m-%d')
    diff = date.today()-post_date.date()
    if diff.days <= 15:
        soup = BeautifulSoup(job_page.content, 'html.parser')
        tag = 'show-more-less-html__markup show-more-less-html__markup--clamp-after-5'
        job_details = soup.find('div', class_= tag)
        job_text = job_details.text.strip()    
        # Compare the job description with my CV - Text matching analysis
        ratio = fuzz.token_set_ratio(CV_text, job_text)
        #ratio = fuzz.token_sort_ratio(CV_text, job_text)
        link_ratio.append([job_URL, ratio])
    
# Create DataFrame & sort by match_ratio & remove duplicate links by unique job identifier
df = pd.DataFrame(link_ratio, columns =['job_link', 'match_ratio'])
df.sort_values(by=['match_ratio'], ascending = False, inplace = True)
df['identifier'] = df['job_link'].str.split("?").str[0]
df.drop_duplicates(subset ="identifier", inplace = True)
print(df.head(10))
